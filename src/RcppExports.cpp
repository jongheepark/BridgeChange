// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// draw_tau_cpp
arma::vec draw_tau_cpp(const arma::mat& beta, const arma::vec& alpha, const double nu_shape, const double nu_rate, const int ns);
RcppExport SEXP _BridgeChange_draw_tau_cpp(SEXP betaSEXP, SEXP alphaSEXP, SEXP nu_shapeSEXP, SEXP nu_rateSEXP, SEXP nsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type nu_shape(nu_shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type nu_rate(nu_rateSEXP);
    Rcpp::traits::input_parameter< const int >::type ns(nsSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_tau_cpp(beta, alpha, nu_shape, nu_rate, ns));
    return rcpp_result_gen;
END_RCPP
}
// draw_sig2_cpp
arma::vec draw_sig2_cpp(const arma::vec& y, const arma::mat& X, const arma::mat& beta, const arma::ivec& state, const double& c0, const double& d0, const int& ns);
RcppExport SEXP _BridgeChange_draw_sig2_cpp(SEXP ySEXP, SEXP XSEXP, SEXP betaSEXP, SEXP stateSEXP, SEXP c0SEXP, SEXP d0SEXP, SEXP nsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type state(stateSEXP);
    Rcpp::traits::input_parameter< const double& >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< const double& >::type d0(d0SEXP);
    Rcpp::traits::input_parameter< const int& >::type ns(nsSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_sig2_cpp(y, X, beta, state, c0, d0, ns));
    return rcpp_result_gen;
END_RCPP
}
// draw_beta_svd_cpp
arma::mat draw_beta_svd_cpp(const std::vector<arma::mat>& Xm, const std::vector<arma::vec>& Ym, const arma::mat& lambda, const arma::vec& sig2, const arma::vec& tau, const int ns, const int K);
RcppExport SEXP _BridgeChange_draw_beta_svd_cpp(SEXP XmSEXP, SEXP YmSEXP, SEXP lambdaSEXP, SEXP sig2SEXP, SEXP tauSEXP, SEXP nsSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type Xm(XmSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::vec>& >::type Ym(YmSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_beta_svd_cpp(Xm, Ym, lambda, sig2, tau, ns, K));
    return rcpp_result_gen;
END_RCPP
}
// draw_beta_cpp
arma::mat draw_beta_cpp(const std::vector<arma::mat>& XX, const std::vector<arma::vec>& XY, const arma::mat& lambda, const arma::vec& sig2, const arma::vec& tau, const int ns, const int K);
RcppExport SEXP _BridgeChange_draw_beta_cpp(SEXP XXSEXP, SEXP XYSEXP, SEXP lambdaSEXP, SEXP sig2SEXP, SEXP tauSEXP, SEXP nsSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::vec>& >::type XY(XYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_beta_cpp(XX, XY, lambda, sig2, tau, ns, K));
    return rcpp_result_gen;
END_RCPP
}
// draw_bi_cpp
Rcpp::List draw_bi_cpp(const arma::vec& y, const arma::mat& X, const arma::mat& W, const std::vector<arma::mat>& D, const std::vector<arma::mat>& Dinv, const std::vector<arma::mat>& XVX_old, const std::vector<arma::vec>& XVy_old, const arma::vec& SSE_old, const arma::vec& sig2, const arma::mat& beta, const arma::ivec& state, const arma::ivec& time_id, const arma::ivec& subject_id, int N, int ns);
RcppExport SEXP _BridgeChange_draw_bi_cpp(SEXP ySEXP, SEXP XSEXP, SEXP WSEXP, SEXP DSEXP, SEXP DinvSEXP, SEXP XVX_oldSEXP, SEXP XVy_oldSEXP, SEXP SSE_oldSEXP, SEXP sig2SEXP, SEXP betaSEXP, SEXP stateSEXP, SEXP time_idSEXP, SEXP subject_idSEXP, SEXP NSEXP, SEXP nsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type Dinv(DinvSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type XVX_old(XVX_oldSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::vec>& >::type XVy_old(XVy_oldSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type SSE_old(SSE_oldSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type state(stateSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type time_id(time_idSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type subject_id(subject_idSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_bi_cpp(y, X, W, D, Dinv, XVX_old, XVy_old, SSE_old, sig2, beta, state, time_id, subject_id, N, ns));
    return rcpp_result_gen;
END_RCPP
}
// draw_beta_BCK_cpp
arma::mat draw_beta_BCK_cpp(const std::vector<arma::mat>& Xm, const std::vector<arma::vec>& Ym, const arma::mat& lambda, const arma::vec& sig2, const arma::vec& tau, const int& ns, const int& K);
RcppExport SEXP _BridgeChange_draw_beta_BCK_cpp(SEXP XmSEXP, SEXP YmSEXP, SEXP lambdaSEXP, SEXP sig2SEXP, SEXP tauSEXP, SEXP nsSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type Xm(XmSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::vec>& >::type Ym(YmSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const int& >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_beta_BCK_cpp(Xm, Ym, lambda, sig2, tau, ns, K));
    return rcpp_result_gen;
END_RCPP
}
// sparse_panel_state_sampler_cpp
Rcpp::List sparse_panel_state_sampler_cpp(const int m, const int T, const int N, const std::vector<arma::vec>& Yt_arr, const std::vector<arma::mat>& Xt_arr, const std::vector<arma::mat>& Wt_arr, const std::vector<arma::mat>& D, const arma::mat& beta, const arma::vec& sig2, const arma::mat P);
RcppExport SEXP _BridgeChange_sparse_panel_state_sampler_cpp(SEXP mSEXP, SEXP TSEXP, SEXP NSEXP, SEXP Yt_arrSEXP, SEXP Xt_arrSEXP, SEXP Wt_arrSEXP, SEXP DSEXP, SEXP betaSEXP, SEXP sig2SEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const int >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::vec>& >::type Yt_arr(Yt_arrSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type Xt_arr(Xt_arrSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type Wt_arr(Wt_arrSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_panel_state_sampler_cpp(m, T, N, Yt_arr, Xt_arr, Wt_arr, D, beta, sig2, P));
    return rcpp_result_gen;
END_RCPP
}
// sparse_fixed_state_sampler_cpp
Rcpp::List sparse_fixed_state_sampler_cpp(const int m, const int T, const int N, const std::vector<arma::vec>& Yt_arr, const std::vector<arma::mat>& Xt_arr, const arma::mat& beta, const arma::vec& sig2, const arma::mat P);
RcppExport SEXP _BridgeChange_sparse_fixed_state_sampler_cpp(SEXP mSEXP, SEXP TSEXP, SEXP NSEXP, SEXP Yt_arrSEXP, SEXP Xt_arrSEXP, SEXP betaSEXP, SEXP sig2SEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const int >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::vec>& >::type Yt_arr(Yt_arrSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type Xt_arr(Xt_arrSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_fixed_state_sampler_cpp(m, T, N, Yt_arr, Xt_arr, beta, sig2, P));
    return rcpp_result_gen;
END_RCPP
}
// sparse_state_sampler_cpp
Rcpp::List sparse_state_sampler_cpp(const int m, const arma::vec& y, const arma::mat& X, const arma::mat& beta, const arma::vec& sig2, const arma::mat& P);
RcppExport SEXP _BridgeChange_sparse_state_sampler_cpp(SEXP mSEXP, SEXP ySEXP, SEXP XSEXP, SEXP betaSEXP, SEXP sig2SEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_state_sampler_cpp(m, y, X, beta, sig2, P));
    return rcpp_result_gen;
END_RCPP
}
// sparse_state_sampler_NB
Rcpp::List sparse_state_sampler_NB(const int m, const arma::vec& y, const arma::mat& X, const int d, const arma::mat& beta, const arma::mat& P);
RcppExport SEXP _BridgeChange_sparse_state_sampler_NB(SEXP mSEXP, SEXP ySEXP, SEXP XSEXP, SEXP dSEXP, SEXP betaSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_state_sampler_NB(m, y, X, d, beta, P));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BridgeChange_draw_tau_cpp", (DL_FUNC) &_BridgeChange_draw_tau_cpp, 5},
    {"_BridgeChange_draw_sig2_cpp", (DL_FUNC) &_BridgeChange_draw_sig2_cpp, 7},
    {"_BridgeChange_draw_beta_svd_cpp", (DL_FUNC) &_BridgeChange_draw_beta_svd_cpp, 7},
    {"_BridgeChange_draw_beta_cpp", (DL_FUNC) &_BridgeChange_draw_beta_cpp, 7},
    {"_BridgeChange_draw_bi_cpp", (DL_FUNC) &_BridgeChange_draw_bi_cpp, 15},
    {"_BridgeChange_draw_beta_BCK_cpp", (DL_FUNC) &_BridgeChange_draw_beta_BCK_cpp, 7},
    {"_BridgeChange_sparse_panel_state_sampler_cpp", (DL_FUNC) &_BridgeChange_sparse_panel_state_sampler_cpp, 10},
    {"_BridgeChange_sparse_fixed_state_sampler_cpp", (DL_FUNC) &_BridgeChange_sparse_fixed_state_sampler_cpp, 8},
    {"_BridgeChange_sparse_state_sampler_cpp", (DL_FUNC) &_BridgeChange_sparse_state_sampler_cpp, 6},
    {"_BridgeChange_sparse_state_sampler_NB", (DL_FUNC) &_BridgeChange_sparse_state_sampler_NB, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_BridgeChange(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
